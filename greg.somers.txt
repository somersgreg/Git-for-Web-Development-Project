https://codepen.io/somersgreg/pen/GRJQKXp?editors=1100


	<strong>1. What is Semantic HTML?</strong> 
		Refers to giving meaning to wrods/content' the "language" used to give a desired effect.


	2. What is HTML used for? 
		Creates the structure of the website.



	3. What is an attribute and where do we put it?
		Attributes are modifiers that go within tags.  They modify the default behaviour of the element or specify certain characteristics. They can be applied to virtually any element.
		Attributes define additional characteristics or properties of the element such as width and height of an image. Attributes are always specified in the start tag (or opening tag) and usually consists of name/value pairs like name="value". Attribute values should always be enclosed in quotation marks.
Also, some attributes are required for certain elements. For instance, an <img> tag must contain a src and alt attributes. 
Example
<img src="images/smiley.png" width="30" height="30" alt="Smiley">
<a href="https://www.google.com/" title="Search Engine">Google</a>
<abbr title="Hyper Text Markup Language">HTML</abbr>
<input type="text" value="John Doe">
In the above example src inside the <img> tag is an attribute and image path provided is its value. Similarly href inside the <a> tag is an attribute and the link provided is its value, and so on.
There are several attributes in HTML5 that do not consist of name/value pairs but consists of just name. Such attributes are called Boolean attributes. Examples of some commonly used Boolean attributes are checked, disabled, readonly, required, etc.
Example
<input type="email" required>
<input type="submit" value="Submit" disabled>
<input type="checkbox" checked>
<input type="text" value="Read only text" readonly>
The id Attribute
The id attribute is used to give a unique name or identifier to an element within a document. This makes it easier to select the element using CSS or JavaScript.
ExampleTry this code »
<input type="text" id="firstName">
<div id="container">Some content</div>
<p id="infoText">This is a paragraph.</p>
Note: The id of an element must be unique within a single document. No two elements in the same document can be named with the same id, and each element can have only one id.
The class Attribute
Like id attribute, the class attribute is also used to identify elements. But unlike id, the class attribute does not have to be unique in the document. This means you can apply the same class to multiple elements in a document, as shown in the following example:
ExampleTry this code »
<input type="text" class="highlight">
<div class="box highlight">Some content</div>
<p class="highlight">This is a paragraph.</p>
Tip: Since a class can be applied to multiple elements, therefore any style rules that are written to that class will be applied to all the elements having that class.
The title Attribute
The title attribute to is used to provide advisory text about an element or its content. Try out the following example to understand how this actually works.
ExampleTry this code »
<abbr title="World Wide Web Consortium">W3C</abbr>
<a href="images/kites.jpg" title="Click to view a larger image">
    <img src="images/kites-thumb.jpg" alt="kites">
</a>
Tip: The value of the title attribute (i.e. title text) is displayed as a tooltip by the web browsers when the user place mouse cursor over the element.
The style Attribute
The style attribute allows you to specify CSS styling rules such as color, font, border, etc. directly within the element. Let's check out an example to see how it works:
Example
<p style="color: blue;">This is a paragraph.</p>
<img src="images/sky.jpg" style="width: 300px;" alt="Cloudy Sky">
<div style="border: 1px solid red;">Some content</div>
The attributes we've discussed above are also called global attributes. For more global attributes please check out the HTML5 global attributes reference.
A complete list of attributes for each HTML element is listed inside HTML5 tag reference.
https://www.tutorialrepublic.com/html-reference/html5-global-attributes.php
https://www.tutorialrepublic.com/html-reference/html5-tags.php

	4. What is the h1 tag used for? How many times should I use it on a page?

		H1 is the Title. It should be used once as its the most important text item on the page and is used by search engines for sorting.



	5. Name two tags that have required attributes

		<img> needs a link

		<a> link anchors get href=url attribute or #home for example it acts as a bookmark within the page to go to the Home nav item.



	6. What do we put in the head of our HTML document?

		title of the page, meta tags, CSS code, Open Graph tags, and JavaScript code.

 

	7. What is an id?

The id attribute specifies a unique id for an HTML element (the value must be unique within the HTML document).
The id value can be used by CSS and JavaScript to perform certain tasks for the element with the specific id value.
In CSS, to select an element with a specific id, write a hash (#) character, followed by the id of the element:


	8. What elements can I add an id to? 

		Anything that can be styled.



	9. How many times can I use the same id on a page? 

		They must be unique.



	10. What is a class? 

The class attribute specifies one or more classnames for an element.
The class attribute is mostly used to point to a class in a style sheet. However, it can also be used by a JavaScript (via the HTML DOM) to make changes to HTML elements with a specified class.


	11. What elements can I add a class to? 

		The class attribute can be used on any HTML element. The class name can be used by CSS and JavaScript to perform certain tasks for elements with the specified class name.



	12. How many times can I use the same class on a page? 

		As many times as needed 



	13. How do I get my link to open in a new tab?

		<a href="http://www.starfall.com/" target="Starfall">Starfall</a>

		Use a different value for the target attribute for each link if you want them to open in different tabs, the same value for the target attribute if you want them to replace the other ones.

	14. What is the alt attribute used for? 

		The required alt attribute specifies an alternate text for an image, if the image cannot be displayed.



	15. How do I reference an id?

		#



	16. What is the difference between a section and a div

		The <section> tag defines sections in a document, such as chapters, headers, footers, or any other sections of the document. whereas: The <div> tag defines a division or a section in an HTML document. The <div> tag is used to group block-elements to format them with CSS.



	17. What is CSS used for? 

		CSS is the language for describing the presentation of Web pages, including colors, layout, and fonts.

		It allows one to adapt the presentation	to different types of devices, such as large screens, small screens, or printers.

CSS is independent of HTML and can be used with any XML-based markup language.



	18. How to we select an element? Example - every h2 on the page

		The element selector should just be the tag name, no brackets or other symbols.



	19. What is the difference between a class and an id? - Give me an example of when I might use each one.

		In the CSS, a class selector is a name preceded by a full stop (“.”) and an ID selector is a name preceded by a hash character (“#”).

		

		The difference between an ID and a class is that an ID can be used to identify one element, whereas a class can be used to identify more than one.



	20. How do we select classes in CSS?

		Style all <p> elements with class="hometown":

		p.hometown {

  			background-color: yellow;

		}



	This <p> element will be styled according to class="center" AND to class="large":



		<p class="center large">This paragraph refers to two classes.</p>    



	21. How do we select a p element with a single class of “human”?

		p.human {}



	22. What is a parent child selector? When would this be useful? 

		The element>element selector is used to select elements with a specific parent. Note: Elements that are not directly a child of the specified parent, are not selected.

		div > p {

  			background-color: yellow;

		}



	23. How do you select all links within a div with the class of sidebar?

NOT SURE. -->	.sidebar a:link, .sidebar a:visited {

    			color:red;

		}



	24. What is a pseudo selector?

		A pseudo-class is used to define a special state of an element.

		It can be used to:



		- Style an element when a user mouses over it

		- Style visited and unvisited links differently

		- Style an element when it gets focus

		/* unvisited link */

a:link {

  color: #FF0000;

}



/* visited link */

a:visited {

  color: #00FF00;

}



/* mouse over link */

a:hover {

  color: #FF00FF;

}



/* selected link */

a:active {

  color: #0000FF;

}



	25. What do we use the change the spacing between lines?

		Change The Spacing Between Lines. Use the line-height property in CSS to do so. Browsers by default will create a certain amount of space between lines to ensure that the text is easily readable. For example, for 12-point type, a browser will place about 1 point of vertical space between lines.



	26. What do we use to change the spacing between letters?

		Change The Spacing Between Lines. Use the line-height property in CSS to do so. Browsers by default will create a certain amount of space between lines to ensure that the text is easily readable. For example, for 12-point type, a browser will place about 1 point of vertical space between lines.



	27. What do we use to to change everything to CAPITALS? lowercase? Capitalize?

	h	The CSS text-transform Property

			lowercase: makes all of the letters in the selected text lowercase.

			uppercase: makes all of the letters in the selected text uppercase or ALL CAPS.

			capitalize: capitalizes the first letter of each word in the selected text.



	28. How do I add a 1px border around my div that is dotted and black?

		

		border: dotted black

		Or:

		p {outline-color:black;}

		p.dotted {outline-style: dotted;}



	29. How do I select everything on the page? 

		Cmd/ctrl+a



	30. How do I write a comment in CSS?

		cmd+a or /* */ or <-- -->



	31. How do I find out what file I am in, when I am using the command line? 

		Pwd, folder



	32. Using the command line - how do I see a list of files/folders in my current folder?

		Ls



	33. How do I remove a file via the command line? Why do I have to be careful with this? 

		Rm



	34. Why should I use version control? 

		Collaboration, prevent loss, history, credit, ...



	35. How often should I commit to github?

		Depends on situation. Upon completing a step, every hour, five hours, ...



	36. What is the command we would use to push our repo up to github? 

		git push -u origin branch-name



	37. Walk me through Lambda's git flow. 

		• FORK :fork-1: 

		• Add your TL as a collab (under settings)

		• Clone git clone <url> (you will need to cd into the place on your computer that you want this file to go before you do this step ie the desktop)

		• cd into your project 

		• create a branch git checkout -b "first-lastname"

		• Work, work, work, work, work 

		• git add .

		• git commit -m "helpful commit message"

		• git push -u origin branch-name

		• create a pull request 





Stretch Questions



    1. What is the difference between an inline element and a block element?
    You can't put block elements inside inline elements. Formatting. By default, inline elements do not force a new line to begin in the document flow. Block elements, on the other hand, typically cause a line break to occur (although, as usual, this can be changed using CSS).

    2. What happens when an element is positioned absolutely? 
An absolutely positioned element no longer exists in the normal document layout flow. Instead, it sits on its own layer separate from everything else.

    3. How do I make an element take up only the amount of space it needs but also have the ability to give it a width? 
    inline-block keeps it inline, but allows it to take on block element properties like width and height.

    4. Name 3 elements that are diplay block by default, 2 elements that are display inline by default and 1 element that is display inline-block by default

The following is a complete list of all HTML "block-level" elements (although "block-level" is not technically defined for elements that are new in HTML5).
<address>
Contact information.
<article>
Article content.
<aside>
Aside content.
<blockquote>
Long ("block") quotation.
<details>
Disclosure widget.
<dialog>
Dialog box.
<dd>
Describes a term in a description list.
<div>
Document division.
<dl>
Description list.
<dt>
Description list term.
<fieldset>
Field set label.
<figcaption>
Figure caption.
<figure>
Groups media content with a caption (see <figcaption>).
<footer>
Section or page footer.
<form>
Input form.
<h1>, <h2>, <h3>, <h4>, <h5>, <h6>
Heading levels 1-6.
<header>
Section or page header.
<hgroup>
Groups header information.
<hr>
Horizontal rule (dividing line).
<li>
List item.
<main>
Contains the central content unique to this document.
<nav>
Contains navigation links.
<ol>
Ordered list.
<p>
Paragraph.
<pre>
Preformatted text.
<section>
Section of a web page.
<table>
Table.
<ul>
Unordered list.

The following elements are inline by default (although block and inline elements are no longer defined in HTML 5, use content categories instead):

<a>
<abbr>
<acronym>
<audio> (if it has visible controls)
<b>
<bdi>
<bdo>
<big>
<br>
<button>
<canvas>
<cite>
<code>
<data>
<datalist>
<del>
<dfn>
<em>
<embed>
<i>
<iframe>
<img>
<input>
<ins>
<kbd>
<label>
<map>
<mark>
<meter>
<noscript>
<object>
<output>
<picture>
<progress>
<q>
<ruby>
<s>
<samp>
<script>
<select>
<slot>
<small>
<span>
<strong>
<sub>
<sup>
<svg>
<template>
<textarea>
<time>
<u>
<tt>
<var>
<video>
<wbr>

	The elements that have display: inline-block by default are button , input , select , and textarea 

    5. In your own words, explain the box model. What is the fix for the box model? 
    
Why the Default Box Model is a Problem
The CSS default box model takes element dimensions that you’ve gone to the trouble of formally declaring (“this box should be 100px wide and 100px tall”), and dumps padding and borders on top of them. The result is that tightly spaced elements are constantly prone to overlapping onto each other and breaking entire layout flows.

It’s usually at odds with the designer’s intention
Probably the simplest argument against the default box model is that it approaches layout differently than actual designers do.

An obvious question is, “Isn’t working with the default model just a matter of learning a different way of saying the same thing?” If you’ve really got your heart set on a 100-pixel box, can’t you just do a bit of math and call it 50 pixels with 20px padding and 5px borders?

That we’d have to do this in the first place points to probably the simplest argument against the default box model: it approaches layout differently than actual designers do. When I try to lay out a page, I never think, “No matter what happens to the rest of the layout, I need this paragraph of text to take up exactly half of the page width.” I always think: “This column that contains text—and which has padding and borders and whatnot—should fill half the page.”

So the default model puts us through a lot of unnecessary translation work. Do we really want to manually be doing a bunch of math—”element width = declared width – (left padding + right padding) – (left border + right border)”—just to make CSS understand what we should have been able to declare with a simple, emphatic “width”?

It’s bad for responsive
The default box model also doesn’t work well for responsive design. Consider the following very intuitive, should-be-very-easy style declaration, attempting to divide a responsive-width container into two equal-width columns, each with 15px of padding:

.responsive-container .half-width-column {
	width: 50%;
	padding: 15px;
}
With the default box model, there’s no way to make this work. To get a 50% total width, you’d have to subtract 15px from 50% of the container width; but you don’t know the container width to be able to convert 15px into a percentage. As a result, whatever width value you attempt will always be broken: the columns will break and stack vertically at some widths, and they won’t fill the container at others.

It creates fragile layouts
Because the default model allows numerous kinds of style declarations to change an element’s dimensions, element styles are built like a house of cards. This makes the default model a great source of styling “gotchas,” which can break an element’s styling at any time. Here’s an example:

/* Image must be exactly 250px wide to fit properly in layout */
.main-container img.fixed-width-img {
	width: 250px;
}

/* 300 lines later...
________________________________ */

/* Today feels like a good day to make some pretty image styles */
.main-container img {
	border: 1px black solid;
}
The sensible CSS above will break, since what needed to be a 250px-wide image is now 252px.

The Fix: box-sizing: border-box
It turns out that CSS has partially redeemed itself with a wonderful solution to this problem. It’s called box-sizing: border-box, and it works perfectly and enjoys essentially total browser support.

How it works
box model border box examplebox-sizing: border-box includes padding and borders in an element’s width. So the .new-home CSS at the top of this post will now generate a square element with 20px of padding, 5px borders, and which all together is 100px by 100px.

How to use it
The code to change your box model comes from the excellent article “* { Box-sizing: Border-box } FTW” by Paul Irish. It’s as follows:

/* apply a natural box layout model to all elements */
*, *:before, *:after {
  -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box;
}
Just drop this into your CSS (preferably somewhere near the top), and you’ll be covered in every browser that’s in current use—including old IE versions.

Things to watch out for
Here are a couple caveats for laying your site out with box-model: border-box:

1. Margins are still outside the element.
This means that the discussion above about padding and borders still applies for margins. For example, this code will still break:

.responsive-container .half-width-column {
	width: 50%;
	margin: 15px;
}
There’s been some discussion of a hypothetical box-sizing: margin-box; option, which would let you set definitive element widths once and for all. I’d probably use this if it existed, although it apparently never will because of something to do with vertical margin collapse (which, for the record, is something that has caused me a lot of confusion as a designer, as opposed to something I couldn’t bear to see changed).

At any rate, for the foreseeable future you’re stuck with being creative about adding margins to your styling in a way that won’t break it.

2. Borders and padding now reduce content size.
Obviously, the space for your borders and padding has to come from somewhere, and with box-model: border-box it’s borrowed from the content itself. So a 100px square image will not actually measure 100px if you give it borders and padding—the whole element will, of which the actual content is just a piece.

This is rarely a problem for me, since with responsive design considerations I typically expect content sizes to be variable anyway. But I do imagine this could cause confusion if, for example, you had two absolutely sized 400px boxes inside an 800px box, and they no longer fit with the addition of borders and padding.

3. Be alert if you’re transitioning an entire site to a new box model.
If you’re going to use a new box model at all, you’ll want to change it across the entire site; this is what the code snippet above does. If you’re thinking about changing an existing site’s box model, be aware that the layout of everything across the site will be changed in ways that may be hard to predict beforehand. Try to do it on a staging site and click around to see the results; don’t just drop it in and forget all about it.

In Conclusion
Fundamentally, box-sizing: border-box makes a lot more sense for how I actually work and think as a designer. I think most people who have tried it feel the same way—the issue is that not enough people know about it. So don’t be afraid to spread the good news!

We’d love to hear your questions thoughts in the comments below—and, as always, if there’s anything we can help with, please be in touch.



   --> 
